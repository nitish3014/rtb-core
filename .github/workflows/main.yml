name: CI Build Core

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  S3_BUCKET_NAME: rtb-dev-artifact
  S3_ARTIFACT_KEY: greenlight-rct-core-0.0.1-SNAPSHOT.jar

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # ‚îÄ‚îÄ‚îÄ‚îÄ CHECKOUT CODE ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1  # Only fetch the most recent commit

      # ‚îÄ‚îÄ‚îÄ‚îÄ BUILD NOTIFICATION ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Notify Build Start
        continue-on-error: true
        run: |
          # Set default values in case git commands fail
          commit_message="[No commit message]"
          committer_name="[Unknown]"
          
          # Try to get commit details (silence errors)
          if commit_details=$(git log -1 --pretty=format:'%s|%an' 2>/dev/null); then
            commit_message=${commit_details%%|*}
            committer_name=${commit_details##*|}
          fi
          
          # Create JSON payload
          payload=$(jq -n \
            --arg text "üöÄ *Build Started*
*Repo:* $GITHUB_REPOSITORY
*Run #:* $GITHUB_RUN_NUMBER
*Commit:* $commit_message
*By:* $committer_name
*URL:* $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            '{text: $text}')
          
          # Send notification (continue even if it fails)
          curl -X POST -H "Content-Type: application/json" \
            --data "$payload" \
            "${{ secrets.GOOGLE_CHAT_WEBHOOK }}" || echo "Notification failed - continuing"

      # ‚îÄ‚îÄ‚îÄ‚îÄ AWS CONFIGURATION ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ‚îÄ‚îÄ‚îÄ‚îÄ BUILD WITH GRADLE ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Clean & Build
        run: |
          ./gradlew clean build -x test || {
            echo "Build failed"
            exit 1
          }

      # ‚îÄ‚îÄ‚îÄ‚îÄ ARTIFACT UPLOAD ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Publish Artifact to S3
        run: |
          # Find the built JAR file
          JAR_FILE=$(find build/libs -name '*.jar' | head -1)
          
          if [ -z "$JAR_FILE" ]; then
            echo "Error: No JAR file found in build/libs/"
            exit 1
          fi
          
          echo "Uploading $JAR_FILE to S3"
          aws s3 cp "$JAR_FILE" "s3://${{ env.S3_BUCKET_NAME }}/${{ env.S3_ARTIFACT_KEY }}"

      # ‚îÄ‚îÄ‚îÄ‚îÄ RESULT NOTIFICATION ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Notify Build Result
        if: always()
        continue-on-error: true
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            status="‚úÖ Build Success"
          else
            status="‚ùå Build Failure"
          fi
          
          payload=$(jq -n \
            --arg text "$status
*Repo:* $GITHUB_REPOSITORY
*Run #:* $GITHUB_RUN_NUMBER
*URL:* $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            '{text: $text}')
          
          curl -X POST -H "Content-Type: application/json" \
            --data "$payload" \
            "${{ secrets.GOOGLE_CHAT_WEBHOOK }}" || echo "Result notification failed"
